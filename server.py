"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
from aiogram import Bot, Dispatcher, executor, types 

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, ContentType

import db

API_TOKEN = "278107460:AAETVY7_ANRT-CkPnKq1hS5pFuMN1jasmVw"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer(
        text="<b>–ë–æ—Ç –¥–ª—è –ª–∞–π–∫–æ–≤</b>\n\n"
        "–î–æ–±–∞–≤–∏—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∏ –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        " ‚ù§Ô∏è üôà üòî üòÅ \n"
        "–ø–æ–¥ –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª—è–µ–º–æ–µ –≤ —á–∞—Ç\n\n"
        "—Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞ /chatlikes üëçüëåüò°\n" 
        "—Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–µ–±—è –≤ —á–∞—Ç–µ /userlikes ‚öôÔ∏èüóë\n" 
        "/chatlikes –∏ /userlikes - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–±–æ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        parse_mode="HTML")

@dp.message_handler(commands=['chatlikes'])
async def set_chat_likes(message: types.Message):
    likes = message.text[11:]
    db.set_chat_likes(message.chat.id,likes)

@dp.message_handler(commands=['userlikes'])
async def set_user_likes(message: types.Message):
    likes = message.text[11:]
    db.set_user_likes(message.chat.id, message.from_user.id,likes)

# –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–¥ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ 
@dp.message_handler(content_types=[ContentType.PHOTO,ContentType.VIDEO])
async def photo_handler(message: types.Message):
    likes = db.get_likes(message.chat.id, message.from_user.id)
    # print(len(likes))
    if len(likes) > 0:
        kb = InlineKeyboardMarkup(row_width=len(likes))
        step = 0
        for em in likes:
            step = step+1
            kb.insert(InlineKeyboardButton(em, callback_data='b'+str(step)))
        await message.answer(text="–û—Ü–µ–Ω–∏!",reply_markup=kb,reply=True)

@dp.callback_query_handler()
async def process_callback_button1(callback_query: types.CallbackQuery):
    mess = callback_query.message
    kb = InlineKeyboardMarkup(len(callback_query.message.reply_markup.inline_keyboard[0]))
    for button in callback_query.message.reply_markup.inline_keyboard[0]:
        if callback_query.data == button.callback_data :
            rows = db.likes(mess.chat.id, mess.message_id, button.callback_data, callback_query.from_user.id)
            if rows == 0:
                button.text = button.text[0]
            else:
                button.text = button.text[0] +str(rows)
        kb.insert(InlineKeyboardButton(text=button.text, callback_data=button.callback_data))
    await bot.edit_message_reply_markup(chat_id=mess.chat.id,message_id=mess.message_id,reply_markup=kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)